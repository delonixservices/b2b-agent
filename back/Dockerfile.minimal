# Multi-stage build for ultra-minimal size
FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat

# Copy package files
COPY package*.json ./

# Install only production dependencies and clean cache
RUN npm ci --only=production --omit=dev && \
    npm cache clean --force && \
    rm -rf /root/.npm

# Copy source code
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Production image using distroless
FROM gcr.io/distroless/nodejs18-debian12 AS runner
WORKDIR /app

# Copy only necessary files
COPY --from=deps --chown=nonroot:nonroot /app/node_modules ./node_modules
COPY --from=builder --chown=nonroot:nonroot /app ./

# Create uploads directory
RUN mkdir -p uploads

# Switch to non-root user
USER nonroot

# Expose port
EXPOSE 3334

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3334

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3334/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Start the application
CMD ["app.js"] 